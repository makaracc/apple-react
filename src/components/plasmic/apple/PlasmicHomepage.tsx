// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9phVQa4JLKnX2zU17K7oLg
// Component: 0bIgQ4vwwPxj

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavItem from "../../NavItem"; // plasmic-import: cPtkGp-vNjKS/component
import NavItemDetails from "../../NavItemDetails"; // plasmic-import: vjapTchna4y_/component
import ProductDisplay from "../../ProductDisplay"; // plasmic-import: YWzY6ZdUIWGZ/component
import Button from "../../Button"; // plasmic-import: VwRr7LFj5ab0/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import TvPlusGalleryItem from "../../TvPlusGalleryItem"; // plasmic-import: 9SoIqxbRUYGZ/component
import FooterLinksGroup from "../../FooterLinksGroup"; // plasmic-import: 5VnG3QbWZWoO/component
import FooterLinksGroupMobile from "../../FooterLinksGroupMobile"; // plasmic-import: w-X8gI-XbGtH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_039SSutRdZkH } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 039sSutRDZkH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9phVQa4JLKnX2zU17K7oLg/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 0bIgQ4vwwPxj/css

import BaselineApplesvgIcon from "./icons/PlasmicIcon__BaselineApplesvg"; // plasmic-import: 0Zi3H1-uDWj7/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: r2MIbEAGNxKQ/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: ZD25KbV35A8X/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: KEfCF-TsW_nd/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: TuWDV6TV-2OW/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: WfViK1RPOXdC/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: idvQ5vpvOr9x/icon
import heroMacbookAir15MidnightCt0PgwizvreeMediumtall2XjpgR16NzYg87NIl from "./images/heroMacbookAir15MidnightCt0PgwizvreeMediumtall2Xjpg.jpg"; // plasmic-import: r16NzYg87nIl/picture
import heroMacbookAir15MidnightCt0PgwizvreeSmalljpgTvzaHbiORjt from "./images/heroMacbookAir15MidnightCt0PgwizvreeSmalljpg.jpg"; // plasmic-import: tvzaHbiO_rjt/picture
import heroIphone14ProSpring9Xo85Pm6SbmmLargetall2XjpgYprnV63OyBvW from "./images/heroIphone14ProSpring9Xo85Pm6SbmmLargetall2Xjpg.jpg"; // plasmic-import: yprnV63OYBvW/picture
import heroIphone14ProSpring9Xo85Pm6SbmmMediumtall2XjpgEuADjVjeAbKl from "./images/heroIphone14ProSpring9Xo85Pm6SbmmMediumtall2Xjpg.jpg"; // plasmic-import: euADjVjeAbKl/picture
import imageCzfPQhPIkct8 from "./images/image.png"; // plasmic-import: CzfPQhPIkct8/picture
import promoBts2023StartframeExvt2T1IuxmeLarge2XjpgHBhz54KQjePr from "./images/promoBts2023StartframeExvt2T1IuxmeLarge2Xjpg.jpg"; // plasmic-import: HBhz54kQJEPr/picture
import promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XjpgF5U9BmTEbbg from "./images/promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2Xjpg.jpg"; // plasmic-import: -f5u9bmTEbbg/picture
import promoAppleVisionProF4V4Zp0Sum2YLarge2XjpgLw9Oha8Vfbs9 from "./images/promoAppleVisionProF4V4Zp0Sum2YLarge2Xjpg.jpg"; // plasmic-import: LW9oha8Vfbs9/picture
import iphoneTradeinPromoD5Au3Rkw5KuqLarge2XjpgZnq3GWbEyFw from "./images/iphoneTradeinPromoD5Au3Rkw5KuqLarge2Xjpg.jpg"; // plasmic-import: znq3GWb_EyFw/picture
import promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XjpgKYq2XarOcEvN from "./images/promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2Xjpg.jpg"; // plasmic-import: kYq2xarOCEvN/picture
import tileCauwwcyyn9HyLarge2X1JpgCdczYnReV from "./images/tileCauwwcyyn9HyLarge2X1Jpg.jpg"; // plasmic-import: CDCZ-YN_RE_v/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<"div">;
  logoContainer?: Flex__<"div">;
  icon?: Flex__<"svg">;
  navItems?: Flex__<"div">;
  icon10?: Flex__<"svg">;
  icon11?: Flex__<"svg">;
  icon30?: Flex__<"svg">;
  navItemDetails?: Flex__<typeof NavItemDetails>;
  h2?: Flex__<"h2">;
  icon12?: Flex__<"svg">;
  icon13?: Flex__<"svg">;
  icon14?: Flex__<"svg">;
  icon15?: Flex__<"svg">;
  icon16?: Flex__<"svg">;
  icon17?: Flex__<"svg">;
  icon18?: Flex__<"svg">;
  icon19?: Flex__<"svg">;
  icon20?: Flex__<"svg">;
  icon21?: Flex__<"svg">;
  icon22?: Flex__<"svg">;
  icon24?: Flex__<"svg">;
  icon26?: Flex__<"svg">;
  icon28?: Flex__<"svg">;
  icon29?: Flex__<"svg">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  tvPlusGalleryItem?: Flex__<typeof TvPlusGalleryItem>;
  footer?: Flex__<"footer">;
  notes?: Flex__<"div">;
  footerLinksGroupMobile?: Flex__<typeof FooterLinksGroupMobile>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_039SSutRdZkH()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames(projectcss.all, sty.navBar)}
          >
            <div
              data-plasmic-name={"logoContainer"}
              data-plasmic-override={overrides.logoContainer}
              className={classNames(projectcss.all, sty.logoContainer)}
            >
              <NavItem
                className={classNames("__wab_instance", sty.navItem__k8Utu)}
                hasIconOnly={true}
                icon={
                  <BaselineApplesvgIcon
                    data-plasmic-name={"icon"}
                    data-plasmic-override={overrides.icon}
                    className={classNames(projectcss.all, sty.icon)}
                    role={"img"}
                  />
                }
                text={""}
              />
            </div>
            <div
              data-plasmic-name={"navItems"}
              data-plasmic-override={overrides.navItems}
              className={classNames(projectcss.all, sty.navItems)}
            >
              <NavItem
                className={classNames("__wab_instance", sty.navItem__l91Zs)}
                icon={
                  <BaselineApplesvgIcon
                    className={classNames(projectcss.all, sty.svg__e0HJf)}
                    role={"img"}
                  />
                }
                text={"Mac"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__kj9M3)}
                icon={null}
                text={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___88Kg
                    )}
                  >
                    {"Store"}
                  </div>
                }
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__pdvfz)}
                text={"iPhone"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__nAz2S)}
                text={"Watch"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__np8Do)}
                text={"Vision"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__zJ2Q)}
                text={"AirPods"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem___0TJbt)}
                text={"TV & Home"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem___4E1Ft)}
                text={"Entertainment"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__elHvu)}
                text={"Accessories"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__ew8Ip)}
                text={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e2Zrl
                    )}
                  >
                    {"Support"}
                  </div>
                }
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__swPed)}
                hasIconOnly={true}
                icon={
                  <Icon2Icon
                    data-plasmic-name={"icon10"}
                    data-plasmic-override={overrides.icon10}
                    className={classNames(projectcss.all, sty.icon10)}
                    role={"img"}
                  />
                }
                text={null}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__mQpp)}
                hasIconOnly={true}
                icon={
                  <Icon5Icon
                    data-plasmic-name={"icon11"}
                    data-plasmic-override={overrides.icon11}
                    className={classNames(projectcss.all, sty.icon11)}
                    role={"img"}
                  />
                }
                text={""}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__sjYv)}
                hasIconOnly={true}
                icon={
                  <Icon7Icon
                    data-plasmic-name={"icon30"}
                    data-plasmic-override={overrides.icon30}
                    className={classNames(projectcss.all, sty.icon30)}
                    role={"img"}
                  />
                }
                text={""}
              />
            </div>
          </div>
          <NavItemDetails
            data-plasmic-name={"navItemDetails"}
            data-plasmic-override={overrides.navItemDetails}
            className={classNames("__wab_instance", sty.navItemDetails)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ej5Pk)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay___06P1
              )}
              imageSmallSrc={{
                src: heroMacbookAir15MidnightCt0PgwizvreeSmalljpgTvzaHbiORjt,
                fullWidth: 734,
                fullHeight: 548,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: heroMacbookAir15MidnightCt0PgwizvreeMediumtall2XjpgR16NzYg87NIl,
                fullWidth: 2136,
                fullHeight: 1388,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__sJwfk)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon12"}
                        data-plasmic-override={overrides.icon12}
                        className={classNames(projectcss.all, sty.icon12)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__b2HIe)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon13"}
                        data-plasmic-override={overrides.icon13}
                        className={classNames(projectcss.all, sty.icon13)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Buy"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {'Macbook Air 15"'}
                </h2>
              }
            />

            <ProductDisplay
              className={classNames("__wab_instance", sty.productDisplay__gs7E)}
              dark={true}
              description={"Pro. Beyond."}
              imageSmallSrc={{
                src: heroIphone14ProSpring9Xo85Pm6SbmmMediumtall2XjpgEuADjVjeAbKl,
                fullWidth: 2136,
                fullHeight: 1388,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: heroIphone14ProSpring9Xo85Pm6SbmmLargetall2XjpgYprnV63OyBvW,
                fullWidth: 6016,
                fullHeight: 1472,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button___0BvaS)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon14"}
                        data-plasmic-override={overrides.icon14}
                        className={classNames(projectcss.all, sty.icon14)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jJswE
                        )}
                      >
                        {"Learn More"}
                      </div>
                    }
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__lEoCi)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon15"}
                        data-plasmic-override={overrides.icon15}
                        className={classNames(projectcss.all, sty.icon15)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__alVjT
                        )}
                      >
                        {"Buy"}
                      </div>
                    }
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={"iPhone 14 Pro"}
            />

            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__nc4BQ
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__miKsI
                  )}
                >
                  {"New camera. New design. Newphoria."}
                </div>
              }
              imageSmallSrc={{
                src: imageCzfPQhPIkct8,
                fullWidth: 3008,
                fullHeight: 736,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: imageCzfPQhPIkct8,
                fullWidth: 3008,
                fullHeight: 736,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__koX3W)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon16"}
                        data-plasmic-override={overrides.icon16}
                        className={classNames(projectcss.all, sty.icon16)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__yppiZ)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon17"}
                        data-plasmic-override={overrides.icon17}
                        className={classNames(projectcss.all, sty.icon17)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Buy"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={"iPhone 15"}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__evwFu)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__f9LuR
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mtrqe
                  )}
                >
                  {"Plus get a gift card up to $150."}
                </div>
              }
              imageSmallSrc={{
                src: promoBts2023StartframeExvt2T1IuxmeLarge2XjpgHBhz54KQjePr,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoBts2023StartframeExvt2T1IuxmeLarge2XjpgHBhz54KQjePr,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__rTkjT)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon18"}
                        data-plasmic-override={overrides.icon18}
                        className={classNames(projectcss.all, sty.icon18)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button___65Zyg)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon19"}
                        data-plasmic-override={overrides.icon19}
                        className={classNames(projectcss.all, sty.icon19)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Buy"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={"Save on Mac or iPad \nfor college"}
            />

            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__wmuEm
              )}
              dark={true}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iZwzq
                  )}
                >
                  {"A healthy leap ahead."}
                </div>
              }
              imageSmallSrc={{
                src: promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XjpgF5U9BmTEbbg,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XjpgF5U9BmTEbbg,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__nQdaL)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon20"}
                        data-plasmic-override={overrides.icon20}
                        className={classNames(projectcss.all, sty.icon20)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__deqqw
                        )}
                      >
                        {"Learn More"}
                      </div>
                    }
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__i3Fu)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon21"}
                        data-plasmic-override={overrides.icon21}
                        className={classNames(projectcss.all, sty.icon21)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vxqga
                        )}
                      >
                        {"Buy"}
                      </div>
                    }
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={
                <div className={classNames(projectcss.all, sty.freeBox__eZmEj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yGghq)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__rZp68)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ujs9I
                      )}
                    >
                      {"WATCH"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uHgxa
                    )}
                  >
                    {"SERIES 8"}
                  </div>
                </div>
              }
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gcwy2)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__oxgh3
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xM6Li
                  )}
                >
                  {"Welcome to the era of \nspatial computing."}
                </div>
              }
              imageSmallSrc={{
                src: promoAppleVisionProF4V4Zp0Sum2YLarge2XjpgLw9Oha8Vfbs9,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoAppleVisionProF4V4Zp0Sum2YLarge2XjpgLw9Oha8Vfbs9,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <Button
                  className={classNames("__wab_instance", sty.button__npWmy)}
                  iconLeft={
                    <Icon6Icon
                      data-plasmic-name={"icon22"}
                      data-plasmic-override={overrides.icon22}
                      className={classNames(projectcss.all, sty.icon22)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"Learn More"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              }
              reverse={true}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__f66E2)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__ozrO9)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cj7GK
                    )}
                  >
                    {"Vision Pro"}
                  </div>
                </div>
              }
            />

            <ProductDisplay
              className={classNames("__wab_instance", sty.productDisplay__c38A)}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yUq9K
                  )}
                >
                  {"Upgrade and save. It's that easy."}
                </div>
              }
              imageSmallSrc={{
                src: iphoneTradeinPromoD5Au3Rkw5KuqLarge2XjpgZnq3GWbEyFw,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: iphoneTradeinPromoD5Au3Rkw5KuqLarge2XjpgZnq3GWbEyFw,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <Button
                  className={classNames("__wab_instance", sty.button__j8VWn)}
                  iconLeft={
                    <Icon6Icon
                      data-plasmic-name={"icon24"}
                      data-plasmic-override={overrides.icon24}
                      className={classNames(projectcss.all, sty.icon24)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"See what your device is worth"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              }
              title={
                <div className={classNames(projectcss.all, sty.freeBox__wXua6)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__evEcu)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Zib
                    )}
                  >
                    {"Trade In"}
                  </div>
                </div>
              }
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__otIzt)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__wzW1U
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1Ia8W
                  )}
                >
                  {"64 matches. 32 teams.\nOne place to follow every goal."}
                </div>
              }
              imageSmallSrc={{
                src: promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XjpgKYq2XarOcEvN,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XjpgKYq2XarOcEvN,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <Button
                  className={classNames("__wab_instance", sty.button__bMjg0)}
                  iconLeft={
                    <Icon9Icon
                      data-plasmic-name={"icon26"}
                      data-plasmic-override={overrides.icon26}
                      className={classNames(projectcss.all, sty.icon26)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"Follow the women's tournament"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              }
              title={
                <div
                  className={classNames(projectcss.all, sty.freeBox___1DcSz)}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg___6JTrq)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Ddto
                    )}
                  >
                    {"News"}
                  </div>
                </div>
              }
            />

            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__xQuoZ
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dgivO
                  )}
                >
                  {"Get up to 3% Daily Cash back\nwith every purchase."}
                </div>
              }
              imageSmallSrc={{
                src: tileCauwwcyyn9HyLarge2X1JpgCdczYnReV,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: tileCauwwcyyn9HyLarge2X1JpgCdczYnReV,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__tImM)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon28"}
                        data-plasmic-override={overrides.icon28}
                        className={classNames(projectcss.all, sty.icon28)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__z7I7J)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon29"}
                        data-plasmic-override={overrides.icon29}
                        className={classNames(projectcss.all, sty.icon29)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Apply Now"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={
                <div className={classNames(projectcss.all, sty.freeBox__u8AvD)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__ogSxn)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e1Eik
                    )}
                  >
                    {"Card"}
                  </div>
                </div>
              }
            />
          </Stack__>
          <CmsQueryRepeater
            className={classNames("__wab_instance", sty.cmsDataFetcher__tvV6W)}
            desc={true}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bm0Ru
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kCf9H
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            noAutoRepeat={true}
            noLayout={true}
            table={"movie"}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx =>
                (() => {
                  const child$Props = {
                    autoplay: true,
                    beforeChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ),
                    className: classNames("__wab_instance", sty.sliderCarousel),
                    dots: true,
                    fade: true,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel__slider"],
                    slidesPerRow: 1,
                    slidesToScroll: 2,
                    slidesToShow: 2,
                    swipeToSlide: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel"}
                      data-plasmic-override={overrides.sliderCarousel}
                      {...child$Props}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.plasmicCmsMovieCollection;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tFetz
                            )}
                            key={currentIndex}
                          >
                            <TvPlusGalleryItem
                              data-plasmic-name={"tvPlusGalleryItem"}
                              data-plasmic-override={
                                overrides.tvPlusGalleryItem
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.tvPlusGalleryItem
                              )}
                              description={
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.data.description;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Let them think they're in control.";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              }
                              genre={
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.data.genre;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Thriller";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              }
                              imageUrl={(() => {
                                try {
                                  return currentItem.data.imageUrl;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </SliderWrapper>
                  );
                })()
              }
            </DataCtxReader__>
          </CmsQueryRepeater>
          <footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"notes"}
              data-plasmic-override={overrides.notes}
              hasGap={true}
              className={classNames(projectcss.all, sty.notes)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i5Idr
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "1. Qualified Purchasers receive an Apple Gift Card when they purchase an eligible Mac or iPad at a Qualifying Location. Only one Apple Gift Card per eligible Mac or iPad per Qualified Purchaser. Offer subject to availability. While supplies last. View full terms and conditions of offer "
                    }
                  </React.Fragment>
                  {
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__a24Zt
                      )}
                      href={
                        "https://www.apple.com/us/shop/back-to-school/terms-conditions"
                      }
                    >
                      {"here"}
                    </a>
                  }
                  <React.Fragment>{"."}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qxZpv
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "2. $4.99/month after free trial. One subscription per Family Sharing group. Offer good for 3 months after eligible device activation. Plan automatically renews until cancelled. Restrictions and other "
                    }
                  </React.Fragment>
                  {
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__n1Ovj
                      )}
                      href={"https://www.apple.com/promo/"}
                    >
                      {"terms"}
                    </a>
                  }
                  <React.Fragment>{" apply."}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ieHiS
                )}
              >
                {
                  "Apple Vision Pro has not been authorized as required by the rules of the Federal Communications Commission. This device is not, and may not be, offered for sale or lease, or sold or leased, until authorization is obtained."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__thR9S
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"Apple Vision Pro will be available early next year on "}
                  </React.Fragment>
                  {
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__urjnS
                      )}
                      href={"https://www.apple.com/"}
                    >
                      {"apple.com"}
                    </a>
                  }
                  <React.Fragment>
                    {" and at Apple retail stores in the U.S."}
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cLlxl
                )}
              >
                {
                  "To access and use all the features of Apple Card, you must add Apple Card to Wallet on an iPhone or iPad with the latest version of iOS or iPadOS. Update to the latest version by going to Settings > General > Software Update. Tap Download and Install."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zhaxK
                )}
              >
                {"Available for qualifying applicants in the United States."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qp3QQ
                )}
              >
                {
                  "Apple Card is issued by Goldman Sachs Bank USA, Salt Lake City Branch."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ot4Ae
                )}
              >
                {
                  "Learn more about how Apple Card applications are evaluated at support.apple.com/kb/HT209218."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4KuOx
                )}
              >
                {"A subscription is required for Apple TV+."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rst0E
                )}
              >
                {
                  "Major League Baseball trademarks and copyrights are used with permission of MLB Advanced Media, L.P. All rights reserved."
                }
              </div>
            </Stack__>
            <CmsQueryRepeater
              className={classNames(
                "__wab_instance",
                sty.cmsDataFetcher__mxJuw
              )}
              desc={false}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w4ZhH
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0}
              loadingMessage={null}
              noAutoRepeat={true}
              noLayout={true}
              useDraft={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dLpXv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i12OX
                        )}
                      >
                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__uGeGw
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx
                                    .plasmicCmsFooterLinksCollection[10].data
                                    .categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[10]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__eKuWb
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[9]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[9]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z8Xu6
                        )}
                      >
                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__rQVt1
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[8]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[8]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__tZdix
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[7]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[7]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.freeBox__sPD)}
                      >
                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup___5BzXu
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[6]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[6]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kkKpt
                        )}
                      >
                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__tgncv
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[5]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[5]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__yb4L
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[4]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[4]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__eobPd
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[3]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[3]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup___3B5UB
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[2]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[2]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hqGhd
                        )}
                      >
                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__roTm0
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[1]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[1]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <FooterLinksGroup
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroup__z7DUg
                          )}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.plasmicCmsFooterLinksCollection[0]
                                    .data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          links={(() => {
                            try {
                              return $ctx.plasmicCmsFooterLinksCollection[0]
                                .data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rDqnv)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.plasmicCmsFooterLinksCollection;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <FooterLinksGroupMobile
                            data-plasmic-name={"footerLinksGroupMobile"}
                            data-plasmic-override={
                              overrides.footerLinksGroupMobile
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.footerLinksGroupMobile
                            )}
                            expanded={undefined}
                            groupName={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.data.categoryName;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            key={currentIndex}
                            links={(() => {
                              try {
                                return currentItem.data.links;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        );
                      })}
                    </div>
                  </React.Fragment>
                )}
              </DataCtxReader__>
            </CmsQueryRepeater>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xkHr
              )}
            >
              <React.Fragment>
                <React.Fragment>{"More ways to shop: "}</React.Fragment>
                {
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link___3NsVb
                    )}
                    href={"https://www.apple.com/retail/"}
                  >
                    {"Find an Apple Store"}
                  </a>
                }
                <React.Fragment>{" or "}</React.Fragment>
                {
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link___26T7M
                    )}
                    href={"https://locate.apple.com/"}
                  >
                    {"other retailer"}
                  </a>
                }
                <React.Fragment>
                  {" near you. Or call 1-800-MY-APPLE."}
                </React.Fragment>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iDoyg)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lb0KM)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hRRmV
                  )}
                >
                  {"Copyright \u00a9 2023 Apple Inc. All rights reserved."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tu5L5
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__rsAbX
                        )}
                        href={"#"}
                      >
                        {"Privacy Policy"}
                      </a>
                    }
                    <React.Fragment>{" | "}</React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__mrJN
                        )}
                        href={"#"}
                      >
                        {"Sales and Refunds"}
                      </a>
                    }
                    <React.Fragment>{" | "}</React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__rerCt
                        )}
                        href={"#"}
                      >
                        {"Terms of Use"}
                      </a>
                    }
                    <React.Fragment>{" | "}</React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__iu4Md
                        )}
                        href={"#"}
                      >
                        {"Legal"}
                      </a>
                    }
                    <React.Fragment>{" | "}</React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__nNpMj
                        )}
                        href={"#"}
                      >
                        {"Site Map"}
                      </a>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tTf0Z
                )}
              >
                {"United States"}
              </div>
            </div>
          </footer>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "logoContainer",
    "icon",
    "navItems",
    "icon10",
    "icon11",
    "icon30",
    "navItemDetails",
    "h2",
    "icon12",
    "icon13",
    "icon14",
    "icon15",
    "icon16",
    "icon17",
    "icon18",
    "icon19",
    "icon20",
    "icon21",
    "icon22",
    "icon24",
    "icon26",
    "icon28",
    "icon29",
    "sliderCarousel",
    "tvPlusGalleryItem",
    "footer",
    "notes",
    "footerLinksGroupMobile"
  ],
  navBar: [
    "navBar",
    "logoContainer",
    "icon",
    "navItems",
    "icon10",
    "icon11",
    "icon30"
  ],
  logoContainer: ["logoContainer", "icon"],
  icon: ["icon"],
  navItems: ["navItems", "icon10", "icon11", "icon30"],
  icon10: ["icon10"],
  icon11: ["icon11"],
  icon30: ["icon30"],
  navItemDetails: ["navItemDetails"],
  h2: ["h2"],
  icon12: ["icon12"],
  icon13: ["icon13"],
  icon14: ["icon14"],
  icon15: ["icon15"],
  icon16: ["icon16"],
  icon17: ["icon17"],
  icon18: ["icon18"],
  icon19: ["icon19"],
  icon20: ["icon20"],
  icon21: ["icon21"],
  icon22: ["icon22"],
  icon24: ["icon24"],
  icon26: ["icon26"],
  icon28: ["icon28"],
  icon29: ["icon29"],
  sliderCarousel: ["sliderCarousel", "tvPlusGalleryItem"],
  tvPlusGalleryItem: ["tvPlusGalleryItem"],
  footer: ["footer", "notes", "footerLinksGroupMobile"],
  notes: ["notes"],
  footerLinksGroupMobile: ["footerLinksGroupMobile"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: "div";
  logoContainer: "div";
  icon: "svg";
  navItems: "div";
  icon10: "svg";
  icon11: "svg";
  icon30: "svg";
  navItemDetails: typeof NavItemDetails;
  h2: "h2";
  icon12: "svg";
  icon13: "svg";
  icon14: "svg";
  icon15: "svg";
  icon16: "svg";
  icon17: "svg";
  icon18: "svg";
  icon19: "svg";
  icon20: "svg";
  icon21: "svg";
  icon22: "svg";
  icon24: "svg";
  icon26: "svg";
  icon28: "svg";
  icon29: "svg";
  sliderCarousel: typeof SliderWrapper;
  tvPlusGalleryItem: typeof TvPlusGalleryItem;
  footer: "footer";
  notes: "div";
  footerLinksGroupMobile: typeof FooterLinksGroupMobile;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    logoContainer: makeNodeComponent("logoContainer"),
    icon: makeNodeComponent("icon"),
    navItems: makeNodeComponent("navItems"),
    icon10: makeNodeComponent("icon10"),
    icon11: makeNodeComponent("icon11"),
    icon30: makeNodeComponent("icon30"),
    navItemDetails: makeNodeComponent("navItemDetails"),
    h2: makeNodeComponent("h2"),
    icon12: makeNodeComponent("icon12"),
    icon13: makeNodeComponent("icon13"),
    icon14: makeNodeComponent("icon14"),
    icon15: makeNodeComponent("icon15"),
    icon16: makeNodeComponent("icon16"),
    icon17: makeNodeComponent("icon17"),
    icon18: makeNodeComponent("icon18"),
    icon19: makeNodeComponent("icon19"),
    icon20: makeNodeComponent("icon20"),
    icon21: makeNodeComponent("icon21"),
    icon22: makeNodeComponent("icon22"),
    icon24: makeNodeComponent("icon24"),
    icon26: makeNodeComponent("icon26"),
    icon28: makeNodeComponent("icon28"),
    icon29: makeNodeComponent("icon29"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    tvPlusGalleryItem: makeNodeComponent("tvPlusGalleryItem"),
    footer: makeNodeComponent("footer"),
    notes: makeNodeComponent("notes"),
    footerLinksGroupMobile: makeNodeComponent("footerLinksGroupMobile"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
